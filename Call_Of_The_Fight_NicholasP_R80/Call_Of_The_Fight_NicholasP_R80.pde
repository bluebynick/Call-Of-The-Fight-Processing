import g4p_controls.*;

import processing.sound.*;

import java.util.*;
import java.awt.Font;

/*Call_Of_The_Fight_NicholasP.java
    Call of the Fight
    Nicholas Paul
    This program is a real time strategy game where the user must have fast reflexes
    and vast strategical knowledge in order to win. This program uses OBJECT ORIENTED 
    PROGRAMMING, an extremely advanced concept that was not covered in ICS3U, but 
    rather is saved for gr. 12 and university level classes. I, Nicholas Paul, a grade 
    11 studeny is extensively researched and learned the concepy. This program uses not 
    one, not two, but three seperate GUI windows in processing that were generated by
    G4P, YET I REDID THE ENTIRETY OF THE GUI CODE IN ORDER TO ADD CERTAIN FEATURES 
    SUCH AS RESETS, BACKGROUNDS AND GAME OVER FUNCTIONALITY. Some windows, like the 
    menu and instructions, were completely CREATED BY ME without the G4P gui builder.
    This program has amazing music. This program has incredible images. This program
    has moving objects within a static window. This program creates it's own animation
    This program esily transitions throught the windows without a hitch. This program
    is over 2000 lines of code long. This program incorporates more than 3 different
    class files. This program has different tabs of code for functionality. This
    program has over 30 different booleans for program flow and generation. This
    program incorporates arrays for the generation of the fighters and the enemies. 
    This program has a working health bar. This program uses over 15 images. This
    program is so exceptional that processing cannot run it with a memory allocation
    under 3000mb. This program has working intro and outtro animation. This program
    generates builidngs in a random location, regenerating them if there is a collison. 
    It therefore has collison detection between the elements of the rng. This program
    calculates cost dependant on your ressources. This program compensates for
    user skill and swarms the user if they are doing too well. This program is unique,
    and unlike any other program ever created. The incoporation of challenging 
    concepts into the processing UI is extensive. This program sums up not only
    the talents of one very talented young programmer, but it is enough to make
    an entire gaming company proud and with more time and effort, this game could be
    released for the general public. This game is incredible and I daresay it is my 
    single most proud programming accomplishment ever. I spent over 100 hours coding 
    this bad boy and I hope you enjoy it as much as I did. It's amazing.     
    June 19th 2016, R78
*/



GWindow window1;
GWindow window2;

SoundFile introFile;
SoundFile welcomeFile;
SoundFile gameMusic;

PVector posEnemies;
PVector velEnemies;
PVector changeable;
PVector depotSize;
PVector posFighter;
PVector [] parray;
Mover [] enemyArray;
int timer, timer2, creditCounter, enemyCounter;

float x,y; //this is the rng for the credit depot
boolean  boo4, boo5; //this is the flow booleans for the credit depot


float xxx,yyy; //this is the rng for the fighter spawner
boolean  boo6, boo7; //this is the flow booleans for the fighter spawner
boolean button4Clicked;

float xxxx,yyyy; //this is the rng for the vehicle depot
boolean  boo8, boo9; //this is the flow booleans for the vehicle depot

float yy; //this is the rng for the fighter

//enemy variables
Mover enemy;
boolean booAttack;

ArrayList array,arrayY;

int health; //the health bar

PVector [] fighterArray; //fighter array 
int fighterCounter;


int taken, generateCounter, update, gameCounter = 0;
double credits;

//program flow booleans //welcomeBoo cannot be declared in initialize
boolean boo1, boo2, boo3,  soundBoo, soundBoo2, soundBoo3, gOverBoo, welcomeBoo = false, createBoo, instructBoo;
boolean depotBoo, facilityBoo, vehicleBoo, workerBoo , vehiclesBoo, enemyBoo, winBoo ; 
boolean stopped, generate, generateBoo, flowBoo, buttonBoo, button11Boo;

//methods: setup, initialize, credits, intro,mouseClicked, depotImage,facilityImage, vehicleImage, fighter, game, enemies, projectile, draw
//public  boolean fight(){
  
  
//}

void setup(){
  surface.setVisible(false); //this makes the actual game not appear until told to. 
  size(600,600);
  //surface.setResizable(true); 
  textSize (width/64); //text size
  frameRate(60);

  //textAlign(CENTER); //draw images from the center
  
  window1 = GWindow.getWindow(this, "Window title", 0, 0, 1000, 700, JAVA2D);
  window1.addDrawHandler(this, "win_draw");
  window1.setActionOnClose(GWindow.EXIT_APP);

  window2 = GWindow.getWindow(this, "Window title", 0, 0, 1000, 700, JAVA2D);
  window2.addDrawHandler(this, "win_draw2");
  window2.setVisible(false);
  window2.setActionOnClose(GWindow.EXIT_APP);
  
  enemyBoo = false;
  enemyArray= new Mover [1000];
  for(int i = 0; i< enemyArray.length;i++){
    enemyArray[i] = new Mover();
  }
  
 
  initialize(); //initialize all the variables
  
 // background(welcomeBackground);
 }
 
void initialize(){
  //introBackgr = loadImage("introBackgr.jpg");
  //darkGrassBackgr = loadImage("darkGrassBackgr.jpg");
  //lightGrassBackgr = loadImage("lightGrassBackgr.jpg");
  //moonBackgr = loadImage("moonBackgr.jpg");
  introBackgr = loadImage("introBackgr.jpg");
  depot = loadImage("creditDepot2.png");
  facility = loadImage("fighterSpawn2.gif"); 
  vehicle = loadImage("vehicleSpawn2.gif"); 
  //base = loadImage("alienBase.gif");
  alien = loadImage("alien2.gif"); 
  welcomeBackground = loadImage("welcomeScreen.jpg");
  credits = new Double(200.0);
  timer =0; timer2 = 0;
  introFile = new SoundFile(this, "introMusic.mp3");
  welcomeFile = new SoundFile(this, "welcomeMusic.mp3");
  gameMusic = new SoundFile(this, "gameMusic.mp3");

  parray = new PVector [20];
  fighterArray = new PVector [200];
  
  
  posText1 = new PVector(width/2,height+height/(width/45)); //text position that starts just off the screen
  posText2 = new PVector(width/2,height+height/(width/45));
  posText3 = new PVector(width/2,height+height/(width/45));
  posText4 = new PVector(width/2,height+height/(width/45));
  posText5 = new PVector(width/2,height+height/(width/45));
  
  depotSize= new PVector(depot.width,depot.height);
  
  posDepotImage = new PVector(width*2,height*2);
  posFacilityImage = new PVector(width*2,height*2);
  posVehicleImage = new PVector(width*2,height*2);
  
  //posBase = new PVector(base.width,base.height); //+100 to compensate for the base size
  
  posEnemies = new PVector(width+10,height/2);
  velEnemies = new PVector(5,0);
  
  
  
  velText1 = new PVector(0,-0.5); //text line 1 velocity
  velText2 = new PVector(0,-0.5); //text line 2 velocity
  velText3 = new PVector(0,-0.5); //text line 3 velocity
  velText4 = new PVector(0,-0.5); //text line 4 velocity
  velText5 = new PVector(0,-0.5); //text line 5 velocity
  
  
  boo4 = false; boo5 = false; //this is the flow booleans for the credit depot
  
  boo6 = false; boo7 = false; //this is the flow booleans for the fighter spawner
  button4Clicked = false;
  
  boo8 = false; boo9 = false; //this is the flow booleans for the vehicle depot
  
  //enemy variables
  booAttack = false; 
  
  health = 100;
  
  fighterCounter = 0;
  
  taken = 1; generateCounter = 0; update =600; creditCounter = 0; enemyCounter =0;
  
  //program flow booleans //welcomeBoo cannot be declared in initialize
  boo1 = false; boo2 = false;  boo3 = false; gOverBoo = false; createBoo = true; instructBoo = false;
  depotBoo = false; facilityBoo= false; vehicleBoo = false; workerBoo = false; vehiclesBoo = false; enemyBoo = false; winBoo = false; 
  stopped = false; generate = false; generateBoo = true; flowBoo = false; buttonBoo = false; button11Boo = false; 
  
  soundBoo = false; soundBoo2 = false; soundBoo3 = false;
}

void credits(){
  
   if (creditCounter == 0){ //these are what increase the rate of credit increase depending on which depot you've built
     credits = credits +0.5; //this is the rate at which the credits increase
     }
     else if (creditCounter == 1){
     credits = credits +0.75;
     }
     else if (creditCounter == 2){
     credits = credits +1.25;
     }
     else if (creditCounter ==3){
     credits = credits +2;
     }
     else if (creditCounter == 4){
     credits = credits +3;
     }
     else {
     credits = credits +4.25;
     }
  Integer i = (int)credits; //this casts counteer to an int to display
  fill(255);
  if(winBoo == false){
    button2.setText("Credits: " + i);
  }
  
}

void game(){
   if(boo2 == false){
     introFile.stop();
     background(255);
     gameMusic.play();
     if(gameCounter == 0){
       createGUI();
     }
     else{
        //button1.setVisible(true);
        button2.setVisible(true);
        button3.setVisible(true);
        button4.setVisible(true);
        button8.setVisible(true);
        //button11.setVisible(true);
        //button12.setVisible(true);
        //label13.setVisible(true);
        label2.setVisible(true);
        button1.setEnabled(true);
        button2.setEnabled(true);
        button3.setEnabled(true);
        button4.setEnabled(true);
        button8.setEnabled(true);
        button11.setEnabled(true);
        button12.setEnabled(true);
        //label13.setEnabled(true);
       
     }
     stroke(0);
     noFill();
     rect(100,100,250,300); //this creates the border around the play zone, 50 more n each side to get all of the images
   
   
     
     boo2 = true;
   }
   if((workerBoo == true) && (buttonBoo == false) && (gameCounter == 0) ) { //buttonBoo makes sure it only creates this button once and workerBoo tells the code when to run this. Game counter is so it only creates the button on the first iteration of the game
    button1 = new GButton(this, 325, 460, 75, 35);
    button1.setIcon("fighter2.png", 1, GAlign.RIGHT, GAlign.MIDDLE);
    button1.setText("Fighter ");
    button1.addEventHandler(this, "button1_click1");
    buttonBoo = true;
      
   }
   if ((workerBoo == true) && (buttonBoo == false) && (gameCounter > 0) ) {
     button1.setVisible(true);
     buttonBoo = true;
   }
   
   credits();
}

void enemies(){ //this is something that is constantly ran so i can put things that need to be econstantly checked in it
  if(enemyBoo == true){ //if enemies can be spawned
     if ((timer2 % 100 == 0) && (timer2 >= 100) && (winBoo == false) ){ //if the timer is an exact multiple of 100
      generateBoo = false; //allow a generation
     }
     if ((timer2 % 50 ==0) && (timer2 >= 800) && (winBoo == false)){ //if the timer is an exact multiple of 50 when grester than 800
       generateBoo = false; //allow a generation
     }
     
     if ((timer2 % 25 ==0) && (timer2 >= 1200) && (winBoo == false)){ //if the timer is an exact multiple of 50 when grester than 800
       generateBoo = false; //allow a generation
     }
     
     if((timer2 >= 1500) && (winBoo == false)){
       generateBoo = false;
     }
     
     if(timer2 >= 1700){
       winBoo = true; 
       noStroke();
       fill(255);
       rect(355,100,600,290);
     }
     
     if(generateBoo == false){ //if a generation is allowed
     //yy = random(100,350);
     generateCounter+=1; //increase the counter
     enemyArray[generateCounter] = new Mover(); //spawn a new enemy at the array index
      
     generateBoo = true;      
      
    }
  }
   
   
   if((winBoo == true) && (gOverBoo == false)){
    button1.setVisible(false);
    button2.setVisible(false);
    button3.setVisible(false);
    button4.setVisible(false);
    button8.setVisible(false);
    //button11.setVisible(false);
    //button12.setVisible(false);
    //label13.setVisible(false);
    label2.setVisible(false);
    
    
    fill(255,0,0);
    textSize(60);
 
    text("You Win!",width/2, height/2-50);
    
     if(button11Boo == false){
            
            button11 = new GButton(this, 150, 75, 80, 30);
            button11.setText("Yes");
            button11.addEventHandler(this, "button11_click1");
            button12 = new GButton(this, 400, 75, 80, 30);
            button12.setText("No");
            button12.addEventHandler(this, "button12_click1");
            label13 = new GLabel(this, 270, 25, 100, 20);
            label13.setText("Play Again?");
            label13.setOpaque(false);
            
            button11Boo = true;
    
    
     }
   }
   if(boo1 == true){
     //health bar
     stroke(0);
     fill(255);
     rect(100,405,105,15);
     fill(255, 0, 0);
     noStroke();
     rect(102,407,health,12); 
     fill(255);
   }
        
   if(booAttack == true){
        
        //go through all the fighter pos.y and if there is a fighter pos.y that equals the mover, health of the base doesn't decrease
        health -= 0.00005;
        if(health == 0){ 
          fill(255,0,0);
          textSize(60);
          text("Game Over",width/2, height/2-50);
          gOverBoo = true;
          button1.setEnabled(false);
          button2.setEnabled(false);
          button3.setEnabled(false);
          button4.setEnabled(false);
          button8.setEnabled(false);
          
          if(button11Boo == false){
            
            button11 = new GButton(this, 150, 75, 80, 30);
            button11.setText("Yes");
            button11.addEventHandler(this, "button11_click1");
            button12 = new GButton(this, 400, 75, 80, 30);
            button12.setText("No");
            button12.addEventHandler(this, "button12_click1");
            label13 = new GLabel(this, 270, 25, 100, 20);
            label13.setText("Play Again?");
            label13.setOpaque(false);
            
            button11Boo = true;
          
          }
          
          //boo1 = false; //reset the game back to the intro
          
          
         }    
        
      }
    //maybe make a condensed pop up instructions window
}

void draw(){ 
  
  if(welcomeBoo ==false){
    welcome();
    
  }
    
  else{
      if(boo1==false){
        intro();
      }
      else{ //change the frame rate and correspond the velocity and credit rate to compensate
        frameRate (60);
        depotImage();
        facilityImage();
        vehicleImage();
        game(); //change this to an instruction screen
      }
      
      enemies();
      //println(posEnemies.x);
      if(flowBoo == false){
        timer +=1;
      }
      else{
        timer2 +=1;
      }
      
      for(int i = 1;i <= generateCounter ;i++) { //the conditions of this loop make sure it's only the actual items we're drawing that appear 
            enemyArray[i].update();
            enemyArray[i].display();        
          }
      println(timer + " , " + timer2 + " , " + generateBoo, yy, generateCounter, health );
    //}
    
    /*else{ //if it's game over
    noStroke();
      fill(255);
      rect(0,0,width,height);
      background(255);
      textSize(100);
      textAlign(CENTER);
      text("GAME OVER!", width/2, height/2);
      
    }*/
  }
}